/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'    
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml'  ]
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    implementation project(':shared')

    testImplementation 'org.junit.platform:junit-platform-launcher:1.6.2'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation group:'org.mockito', name:'mockito-junit-jupiter', version: '3.9.0'
    testImplementation group:'org.powermock', name:'powermock-core', version: '2.0.9'
    testImplementation project(':server')

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'


    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'


    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'ece651.riskgame.client.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    //systemProperty "testfx.headless", "true"
    //systemProperty "testfx.robot", "glass"

}

clover{
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
    report {
        xml=true
        html = true
    }
}

sourceSets {
  main.output.resourcesDir = main.java.outputDir
}
